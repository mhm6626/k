C.2.1 Basic concepts
namespace-name:
namespace-or-type-name  
type-name:
namespace-or-type-name  
namespace-or-type-name:
identifier  
namespace-or-type-name  .  identifier  
C.2.2 Types
type:
value-type  
reference-type  
value-type:
struct-type  
enum-type  
struct-type:
type-name  
simple-type  
simple-type:
numeric-type  
bool  
numeric-type:
integral-type  
floating-point-type  
decimal  
integral-type:
sbyte  
byte  
short  
ushort  
int  
uint  
long  
ulong  
char  
floating-point-type:
float  
double  
enum-type:
type-name  
reference-type:
class-type  
interface-type  
array-type  
delegate-type  
class-type:
type-name  
object  
string  
interface-type:
type-name  
array-type:
non-array-type  rank-specifiers  
non-array-type:
type  
rank-specifiers:
rank-specifier  
rank-specifiers  rank-specifier  
rank-specifier:
[  dim-separators-opt  ]  
dim-separators:
,  
dim-separators  ,  
delegate-type:
type-name  
C.2.3 Variables
variable-reference:
expression  
C.2.4 Expressions
argument-list:
argument  
argument-list  ,  argument  
argument:
expression  
ref  variable-reference  
out  variable-reference  
primary-expression:
primary-no-array-creation-expression  
array-creation-expression  
primary-no-array-creation-expression:
literal  
simple-name  
parenthesized-expression  
member-access  
invocation-expression  
element-access  
this-access  
base-access  
post-increment-expression  
post-decrement-expression  
object-creation-expression  
delegate-creation-expression  
typeof-expression  
sizeof-expression  
checked-expression  
unchecked-expression  
simple-name:
identifier  
parenthesized-expression:
(  expression  )  
member-access:
primary-expression  .  identifier  
predefined-type  .  identifier  
predefined-type:  one  of  
bool  byte  char  decimal  double  float  int  long  
object  sbyte  short  string  uint  ulong  ushort  
invocation-expression:
primary-expression  (  argument-list-opt  )  
element-access:
primary-no-array-creation-expression  [  expression-list  ]  
expression-list:
expression  
expression-list  ,  expression  
this-access:
this  
base-access:
base  .  identifier  
base  [  expression-list  ]  
post-increment-expression:
primary-expression  ++  
post-decrement-expression:
primary-expression  --  
object-creation-expression:
new  type  (  argument-list-opt  )  
array-creation-expression:
new  non-array-type  [  expression-list  ]  rank-specifiers-opt  array-initializer-opt  
new  array-type  array-initializer  
delegate-creation-expression:
new  delegate-type  (  expression  )  
typeof-expression:
typeof  (  type  )  
typeof  (  void  )  
checked-expression:
checked  (  expression  )  
unchecked-expression:
unchecked  (  expression  )  
unary-expression:
primary-expression  
+  unary-expression  
-  unary-expression  
!  unary-expression  
~  unary-expression  
*  unary-expression  
pre-increment-expression  
pre-decrement-expression  
cast-expression  
pre-increment-expression:
++  unary-expression  
pre-decrement-expression:
--  unary-expression  
cast-expression:
(  type  )  unary-expression  
multiplicative-expression:
unary-expression  
multiplicative-expression  *  unary-expression  
multiplicative-expression  /  unary-expression  
multiplicative-expression  %  unary-expression  
additive-expression:
multiplicative-expression  
additive-expression  +  multiplicative-expression  
additive-expression  â€“  multiplicative-expression  
shift-expression:
additive-expression  
shift-expression  <<  additive-expression  
shift-expression  >>  additive-expression  
relational-expression:
shift-expression  
relational-expression  <  shift-expression  
relational-expression  >  shift-expression  
relational-expression  <=  shift-expression  
relational-expression  >=  shift-expression  
relational-expression  is  type  
relational-expression  as  type  
equality-expression:
relational-expression  
equality-expression  ==  relational-expression  
equality-expression  !=  relational-expression  
and-expression:
equality-expression  
and-expression  &  equality-expression  
exclusive-or-expression:
and-expression  
exclusive-or-expression  ^  and-expression  
inclusive-or-expression:
exclusive-or-expression  
inclusive-or-expression  |  exclusive-or-expression  
conditional-and-expression:
inclusive-or-expression  
conditional-and-expression  &&  inclusive-or-expression  
conditional-or-expression:
conditional-and-expression  
conditional-or-expression  ||  conditional-and-expression  
conditional-expression:
conditional-or-expression  
conditional-or-expression  ?  expression  :  expression  
assignment:
unary-expression  assignment-operator  expression  
assignment-operator:  one  of  
=  +=  -=  *=  /=  %=  &=  |=  ^=  <<=  >>=  
expression:
conditional-expression  
assignment  
constant-expression:
expression  
boolean-expression:
expression  
C.2.5 Statements
statement:
labeled-statement  
declaration-statement  
embedded-statement  
embedded-statement:
block  
empty-statement  
expression-statement  
selection-statement  
iteration-statement  
jump-statement  
try-statement  
checked-statement  
unchecked-statement  
lock-statement  
using-statement  
block:
{  statement-list-opt  }  
statement-list:
statement  
statement-list  statement  
empty-statement:
;  
labeled-statement:
identifier  :  statement  
declaration-statement:
local-variable-declaration  ;  
local-constant-declaration  ;  
local-variable-declaration:
type  local-variable-declarators  
local-variable-declarators:
local-variable-declarator  
local-variable-declarators  ,  local-variable-declarator  
local-variable-declarator:
identifier  
identifier  =  local-variable-initializer  
local-variable-initializer:
expression  
array-initializer  
local-constant-declaration:
const  type  constant-declarators  
constant-declarators:
constant-declarator  
constant-declarators  ,  constant-declarator  
constant-declarator:
identifier  =  constant-expression  
expression-statement:
statement-expression  ;  
statement-expression:
invocation-expression  
object-creation-expression  
assignment  
post-increment-expression  
post-decrement-expression  
pre-increment-expression  
pre-decrement-expression  
selection-statement:
if-statement  
switch-statement  
if-statement:
if  (  boolean-expression  )  embedded-statement  
if  (  boolean-expression  )  embedded-statement  else  embedded-statement  
boolean-expression:
expression  
switch-statement:
switch  (  expression  )  switch-block  
switch-block:
{  switch-sections-opt  }  
switch-sections:
switch-section  
switch-sections  switch-section  
switch-section:
switch-labels  statement-list  
switch-labels:
switch-label  
switch-labels  switch-label  
switch-label:
case  constant-expression  :  
default  :  
iteration-statement:
while-statement  
do-statement  
for-statement  
foreach-statement  
while-statement:
while  (  boolean-expression  )  embedded-statement  
do-statement:
do  embedded-statement  while  (  boolean-expression  )  ;  
for-statement:
for  (  for-initializer-opt  ;  for-condition-opt  ;  for-iterator-opt  )  embedded-statement  
for-initializer:
local-variable-declaration  
statement-expression-list  
for-condition:
boolean-expression  
for-iterator:
statement-expression-list  
statement-expression-list:
statement-expression  
statement-expression-list  ,  statement-expression  
foreach-statement:
foreach  (  type  identifier  in  expression  )  embedded-statement  
jump-statement:
break-statement  
continue-statement  
goto-statement  
return-statement  
throw-statement  
break-statement:
break  ;  
continue-statement:
continue  ;  
goto-statement:
goto  identifier  ;  
goto  case  constant-expression  ;  
goto  default  ;  
return-statement:
return  expression-opt  ;  
throw-statement:
throw  expression-opt  ;  
try-statement:
try  block  catch-clauses  
try  block  finally-clause  
try  block  catch-clauses  finally-clause  
catch-clauses:
specific-catch-clauses  general-catch-clause-opt  
specific-catch-clauses-opt  general-catch-clause  
specific-catch-clauses:
specific-catch-clause  
specific-catch-clauses  specific-catch-clause  
specific-catch-clause:
catch  (  class-type  identifier-opt  )  block  
general-catch-clause:
catch  block  
finally-clause:
finally  block  
checked-statement:
checked  block  
unchecked-statement:
unchecked  block  
lock-statement:
lock  (  expression  )  embedded-statement  
using-statement:
using  (  resource-acquisition  )  embedded-statement  
resource-acquisition:
local-variable-declaration  
expression  
C.2.6 Namespaces
compilation-unit:
using-directives-opt  global-attributes-opt  namespace-member-declarations-opt  
namespace-declaration:
namespace  qualified-identifier  namespace-body  ;opt  
qualified-identifier:
identifier  
qualified-identifier  .  identifier  
namespace-body:
{  using-directives-opt  namespace-member-declarations-opt  }  
using-directives:
using-directive  
using-directives  using-directive  
using-directive:
using-alias-directive  
using-namespace-directive  
using-alias-directive:
using  identifier  =  namespace-or-type-name  ;  
using-namespace-directive:
using  namespace-name  ;  
namespace-member-declarations:
namespace-member-declaration  
namespace-member-declarations  namespace-member-declaration  
namespace-member-declaration:
namespace-declaration  
type-declaration  
type-declaration:
class-declaration  
struct-declaration  
interface-declaration  
enum-declaration  
delegate-declaration  
C.2.7 Classes
class-declaration:
attributes-opt  class-modifiers-opt  class  identifier  class-base-opt  class-body  ;opt  
class-modifiers:
class-modifier  
class-modifiers  class-modifier  
class-modifier:
new  
public  
protected  
internal  
private  
abstract  
sealed  
class-base:
:  class-type  
:  interface-type-list  
:  class-type  ,  interface-type-list  
interface-type-list:
interface-type  
interface-type-list  ,  interface-type  
class-body:
{  class-member-declarations-opt  }  
class-member-declarations:
class-member-declaration  
class-member-declarations  class-member-declaration  
class-member-declaration:
constant-declaration  
field-declaration  
method-declaration  
property-declaration  
event-declaration  
indexer-declaration  
operator-declaration  
constructor-declaration  
destructor-declaration  
static-constructor-declaration  
type-declaration  
constant-declaration:
attributes-opt  constant-modifiers-opt  const  type  constant-declarators  ;  
constant-modifiers:
constant-modifier  
constant-modifiers  constant-modifier  
constant-modifier:
new  
public  
protected  
internal  
private  
constant-declarators:
constant-declarator  
constant-declarators  ,  constant-declarator  
constant-declarator:
identifier  =  constant-expression  
field-declaration:
attributes-opt  field-modifiers-opt  type  variable-declarators  ;  
field-modifiers:
field-modifier  
field-modifiers  field-modifier  
field-modifier:
new  
public  
protected  
internal  
private  
static  
readonly  
volatile  
variable-declarators:
variable-declarator  
variable-declarators  ,  variable-declarator  
variable-declarator:
identifier  
identifier  =  variable-initializer  
variable-initializer:
expression  
array-initializer  
method-declaration:
method-header  method-body  
method-header:
attributes-opt  method-modifiers-opt  return-type  member-name  (  formal-parameter-list-opt  )  
method-modifiers:
method-modifier  
method-modifiers  method-modifier  
method-modifier:
new  
public  
protected  
internal  
private  
static  
virtual  
sealed  
override  
abstract  
extern  
return-type:
type  
void  
member-name:
identifier  
interface-type  .  identifier  
method-body:
block  
;  
formal-parameter-list:
fixed-parameters  
fixed-parameters  ,  parameter-array  
parameter-array  
fixed-parameters:
fixed-parameter  
fixed-parameters  ,  fixed-parameter  
fixed-parameter:
attributes-opt  parameter-modifier-opt  type  identifier  
parameter-modifier:
ref  
out  
parameter-array:
attributes-opt  params  array-type  identifier  
property-declaration:
attributes-opt  property-modifiers-opt  type  member-name  {  accessor-declarations  }  
property-modifiers:
property-modifier  
property-modifiers  property-modifier  
property-modifier:
new  
public  
protected  
internal  
private  
static  
virtual  
sealed  
override  
abstract  
extern  
member-name:
identifier  
interface-type  .  identifier  
accessor-declarations:
get-accessor-declaration  set-accessor-declaration-opt  
set-accessor-declaration  get-accessor-declaration-opt  
get-accessor-declaration:
attributes-opt  get  accessor-body  
set-accessor-declaration:
attributes-opt  set  accessor-body  
accessor-body:
block  
;  
event-declaration:
attributes-opt  event-modifiers-opt  event  type  variable-declarators  ;  
attributes-opt  event-modifiers-opt  event  type  member-name  {  event-accessor-declarations  }  
event-modifiers:
event-modifier  
event-modifiers  event-modifier  
event-modifier:
new  
public  
protected  
internal  
private  
static  
virtual  
sealed  
override  
abstract  
extern  
event-accessor-declarations:
add-accessor-declaration  remove-accessor-declaration  
remove-accessor-declaration  add-accessor-declaration  
add-accessor-declaration:
attributes-opt  add  block  
remove-accessor-declaration:
attributes-opt  remove  block  
indexer-declaration:
attributes-opt  indexer-modifiers-opt  indexer-declarator  {  accessor-declarations  }  
indexer-modifiers:
indexer-modifier  
indexer-modifiers  indexer-modifier  
indexer-modifier:
new  
public  
protected  
internal  
private  
virtual  
sealed  
override  
abstract  
extern  
indexer-declarator:
type  this  [  formal-parameter-list  ]  
type  interface-type  .  this  [  formal-parameter-list  ]  
operator-declaration:
attributes-opt  operator-modifiers  operator-declarator  operator-body  
operator-modifiers:
operator-modifier  
operator-modifiers  operator-modifier  
operator-modifier:
public  
static  
extern  
operator-declarator:
unary-operator-declarator  
binary-operator-declarator  
conversion-operator-declarator  
unary-operator-declarator:
type  operator  overloadable-unary-operator  (  type  identifier  )  
overloadable-unary-operator:  one  of  
+  -  !  ~  ++  --  true  false  
binary-operator-declarator:
type  operator  overloadable-binary-operator  (  type  identifier  ,  type  identifier  )  
overloadable-binary-operator:  one  of  
+  -  *  /  %  &  |  ^  <<  >>  ==  !=  >  <  >=  <=  
conversion-operator-declarator:
implicit  operator  type  (  type  identifier  )  
explicit  operator  type  (  type  identifier  )  
operator-body:
block  
;  
constructor-declaration:
attributes-opt  constructor-modifiers-opt  constructor-declarator  constructor-body  
constructor-modifiers:
constructor-modifier  
constructor-modifiers  constructor-modifier  
constructor-modifier:
public  
protected  
internal  
private  
extern  
constructor-declarator:
identifier  (  formal-parameter-list-opt  )  constructor-initializer-opt  
constructor-initializer:
:  base  (  argument-list-opt  )  
:  this  (  argument-list-opt  )  
constructor-body:
block  
;  
static-constructor-declaration:
attributes-opt  static-constructor-modifiers  identifier  (  )  static-constructor-body  
static-constructor-modifiers  
extern-opt  static  
static  extern-opt  
static-constructor-body:
block  
;  
destructor-declaration:
attributes-opt  extern-opt  ~  identifier  (  )  destructor-body  
destructor-body:
block  
;  
C.2.8 Structs
struct-declaration:
attributes-opt  struct-modifiers-opt  struct  identifier  struct-interfaces-opt  struct-body  ;opt  
struct-modifiers:
struct-modifier  
struct-modifiers  struct-modifier  
struct-modifier:
new  
public  
protected  
internal  
private  
struct-interfaces:
:  interface-type-list  
struct-body:
{  struct-member-declarations-opt  }  
struct-member-declarations:
struct-member-declaration  
struct-member-declarations  struct-member-declaration  
struct-member-declaration:
constant-declaration  
field-declaration  
method-declaration  
property-declaration  
event-declaration  
indexer-declaration  
operator-declaration  
constructor-declaration  
static-constructor-declaration  
type-declaration  
C.2.9 Arrays
array-type:
non-array-type  rank-specifiers  
non-array-type:
type  
rank-specifiers:
rank-specifier  
rank-specifiers  rank-specifier  
rank-specifier:
[  dim-separators-opt  ]  
dim-separators:
,  
dim-separators  ,  
array-initializer:
{  variable-initializer-list-opt  }  
{  variable-initializer-list  ,  }  
variable-initializer-list:
variable-initializer  
variable-initializer-list  ,  variable-initializer  
variable-initializer:
expression  
array-initializer  
C.2.10 Interfaces
interface-declaration:
attributes-opt  interface-modifiers-opt  interface  identifier  interface-base-opt  interface-body  ;opt  
interface-modifiers:
interface-modifier  
interface-modifiers  interface-modifier  
interface-modifier:
new  
public  
protected  
internal  
private  
interface-base:
:  interface-type-list  
interface-body:
{  interface-member-declarations-opt  }  
interface-member-declarations:
interface-member-declaration  
interface-member-declarations  interface-member-declaration  
interface-member-declaration:
interface-method-declaration  
interface-property-declaration  
interface-event-declaration  
interface-indexer-declaration  
interface-method-declaration:
attributes-opt  new-opt  return-type  identifier  (  formal-parameter-list-opt  )  ;  
interface-property-declaration:
attributes-opt  new-opt  type  identifier  {  interface-accessors  }  
interface-accessors:
attributes-opt  get  ;  
attributes-opt  set  ;  
attributes-opt  get  ;  attributes-opt  set  ;  
attributes-opt  set  ;  attributes-opt  get  ;  
interface-event-declaration:
attributes-opt  new-opt  event  type  identifier  ;  
interface-indexer-declaration:
attributes-opt  new-opt  type  this  [  formal-parameter-list  ]  {  interface-accessors  }  
C.2.11 Enums
enum-declaration:
attributes-opt  enum-modifiers-opt  enum  identifier  enum-base-opt  enum-body  ;opt  
enum-base:
:  integral-type  
enum-body:
{  enum-member-declarations-opt  }  
{  enum-member-declarations  ,  }  
enum-modifiers:
enum-modifier  
enum-modifiers  enum-modifier  
enum-modifier:
new  
public  
protected  
internal  
private  
enum-member-declarations:
enum-member-declaration  
enum-member-declarations  ,  enum-member-declaration  
enum-member-declaration:
attributes-opt  identifier  
attributes-opt  identifier  =  constant-expression  
C.2.12 Delegates
delegate-declaration:
attributes-opt  delegate-modifiers-opt  delegate  return-type  identifier  (  formal-parameter-list-opt  )  ;  
delegate-modifiers:
delegate-modifier  
delegate-modifiers  delegate-modifier  
delegate-modifier:
new  
public  
protected  
internal  
private  
C.2.13 Attributes
global-attributes:
global-attribute-sections  
global-attribute-sections:
global-attribute-section  
global-attribute-sections  global-attribute-section  
global-attribute-section:
[  global-attribute-target-specifier  attribute-list  ]  
[  global-attribute-target-specifier  attribute-list  ,]  
global-attribute-target-specifier:
global-attribute-target  :  
global-attribute-target:
assembly  
module  
attributes:
attribute-sections  
attribute-sections:
attribute-section  
attribute-sections  attribute-section  
attribute-section:
[  attribute-target-specifier-opt  attribute-list  ]  
[  attribute-target-specifier-opt  attribute-list  ,  ]  
attribute-target-specifier:
attribute-target  :  
attribute-target:
field  
event  
method  
param  
property  
return  
type  
attribute-list:
attribute  
attribute-list  ,  attribute  
attribute:
attribute-name  attribute-arguments-opt  
attribute-name:
type-name  
attribute-arguments:
(  positional-argument-list-opt  )  
(  positional-argument-list  ,  named-argument-list  )  
(  named-argument-list  )  
positional-argument-list:
positional-argument  
positional-argument-list  ,  positional-argument  
positional-argument:
attribute-argument-expression  
named-argument-list:
named-argument  
named-argument-list  ,  named-argument  
named-argument:
identifier  =  attribute-argument-expression  
attribute-argument-expression:
expression  
C.2.31 Opt
dim-separators-opt:
dim-separators
empty
argument-list-opt:
argument-list
empty
argument-list-opt:
argument-list
empty
rank-specifiers-opt:
rank-specifiers
empty
array-initializer-opt:
array-initializer
empty
statement-list-opt:
statement-list
empty
switch-sections-opt:
switch-sections
empty
for-initializer-opt:
for-initializer
empty
for-condition-opt:
for-condition
empty
for-iterator-opt:
for-iterator
empty
expression-opt:
expression
empty
expression-opt:
expression
empty
general-catch-clause-opt:
general-catch-clause
empty
specific-catch-clauses-opt:
specific-catch-clauses
empty
identifier-opt:
identifier
empty
using-directives-opt:
using-directives
empty
global-attributes-opt:
global-attributes
empty
namespace-member-declarations-opt:
namespace-member-declarations
empty
using-directives-opt:
using-directives
empty
namespace-member-declarations-opt:
namespace-member-declarations
empty
attributes-opt:
attributes
empty
class-modifiers-opt:
class-modifiers
empty
class-base-opt:
class-base
empty
class-member-declarations-opt:
class-member-declarations
empty
attributes-opt:
attributes
empty
constant-modifiers-opt:
constant-modifiers
empty
attributes-opt:
attributes
empty
field-modifiers-opt:
field-modifiers
empty
attributes-opt:
attributes
empty
method-modifiers-opt:
method-modifiers
empty
formal-parameter-list-opt:
formal-parameter-list
empty
attributes-opt:
attributes
empty
parameter-modifier-opt:
parameter-modifier
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
property-modifiers-opt:
property-modifiers
empty
set-accessor-declaration-opt:
set-accessor-declaration
empty
get-accessor-declaration-opt:
get-accessor-declaration
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
event-modifiers-opt:
event-modifiers
empty
attributes-opt:
attributes
empty
event-modifiers-opt:
event-modifiers
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
indexer-modifiers-opt:
indexer-modifiers
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
constructor-modifiers-opt:
constructor-modifiers
empty
formal-parameter-list-opt:
formal-parameter-list
empty
constructor-initializer-opt:
constructor-initializer
empty
argument-list-opt:
argument-list
empty
argument-list-opt:
argument-list
empty
attributes-opt:
attributes
empty
extern-opt:
extern
empty
extern-opt:
extern
empty
attributes-opt:
attributes
empty
extern-opt:
extern
empty
attributes-opt:
attributes
empty
struct-modifiers-opt:
struct-modifiers
empty
struct-interfaces-opt:
struct-interfaces
empty
struct-member-declarations-opt:
struct-member-declarations
empty
dim-separators-opt:
dim-separators
empty
variable-initializer-list-opt:
variable-initializer-list
empty
attributes-opt:
attributes
empty
interface-modifiers-opt:
interface-modifiers
empty
interface-base-opt:
interface-base
empty
interface-member-declarations-opt:
interface-member-declarations
empty
attributes-opt:
attributes
empty
new-opt:
new
empty
formal-parameter-list-opt:
formal-parameter-list
empty
attributes-opt:
attributes
empty
new-opt:
new
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
new-opt:
new
empty
attributes-opt:
attributes
empty
new-opt:
new
empty
attributes-opt:
attributes
empty
enum-modifiers-opt:
enum-modifiers
empty
enum-base-opt:
enum-base
empty
enum-member-declarations-opt:
enum-member-declarations
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
attributes-opt:
attributes
empty
delegate-modifiers-opt:
delegate-modifiers
empty
formal-parameter-list-opt:
formal-parameter-list
empty
attribute-target-specifier-opt:
attribute-target-specifier
empty
attribute-target-specifier-opt:
attribute-target-specifier
empty
attribute-arguments-opt:
attribute-arguments
empty
positional-argument-list-opt:
positional-argument-list
empty

